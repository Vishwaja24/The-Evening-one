
#main

from data_processing.data_processor import DataProcessor

if __name__ == "__main__":
    file_name = 'MicroplasticsData/samples_geocoded.csv'  # Path to your CSV file
    processor = DataProcessor(file_name)  # Instantiating the DataProcessor class




===================================================================================================================================


#data_processor

import csv

class DataProcessor:
    def __init__(self, file_name):
        # Reading the CSV data
        self.csv_data = self.read_CSV_file(file_name)
        
        # Printing the max value in a chosen column using brute-force
        column_index = 6  # Column index for 'Concentration' (adjust if necessary)
        max_value = self.find_max_value(column_index)
        if max_value is not None:
            print(f"Max value (brute-force) in column {column_index}: {max_value}")
        else:
            print(f"No valid numeric data found in column {column_index}.")
        
        # Printing the max value in a chosen column using list comprehension
        valid_values = [float(row[column_index]) for row in self.csv_data if self.is_numeric(row[column_index])]
        if valid_values:
            max_value_comprehension = max(valid_values)
            print(f"Max value (list comprehension) in column {column_index}: {max_value_comprehension}")
        else:
            print(f"No valid numeric data found in column {column_index} for list comprehension.")
        
        # Extracting unique text values from another column
        text_column_index = 3  # Column index for 'Location' (adjust if necessary)
        unique_values = {row[text_column_index] for row in self.csv_data}
        print(f"Number of unique values in column {text_column_index}: {len(unique_values)}")
        print(f"First 5 unique values: {list(unique_values)[:5]}")

    def read_CSV_file(self, file_name):
        '''
        Read from a CSV file into a list
        @param file_name String: The CSV file to read. It should have a header row, which will be skipped
        @return list: the list containing all the rows except the header row
        '''
        csv_data = []
        with open(file_name, newline='') as f:
            reader = csv.reader(f, delimiter=',')
            next(reader)  # Skip the header row
            for row in reader:
                csv_data.append(row)
        return csv_data

    def find_max_value(self, column_index):
        max_value = float('-inf')
        found_valid = False
        for row in self.csv_data:
            try:
                if self.is_numeric(row[column_index]):
                    value = float(row[column_index])
                    if value > max_value:
                        max_value = value
                    found_valid = True
            except ValueError:
                continue
        return max_value if found_valid else None

    def is_numeric(self, value):
        '''Check if a value can be converted to float'''
        try:
            float(value)
            return True
        except ValueError:
            return False
